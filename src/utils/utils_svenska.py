#!/usr/bin/python3

import os
import json
import logging
import logging.config
from pathlib import Path
from datetime import datetime

def get_full_path(relative_path):
    base_path = os.path.dirname(__file__)
    return os.path.join(base_path, relative_path)

def setup_logging(default_path='config/logging.json', default_level=logging.INFO, env_key='LOG_CFG', log_identifier=None):
    path = get_full_path(default_path)
    value = os.getenv(env_key, None)
    if value:
        path = value
    if Path(path).exists():
        with open(path, 'rt') as f:
            config = json.load(f)
        
        # Dynamisk namngivning av loggfiler baserat på en identifierare eller tidsstämpel
        if log_identifier is None:
            log_identifier = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        for handler in config['handlers'].values():
            if 'filename' in handler:
                handler_basepath = os.path.dirname(handler['filename'])
                handler_filename = os.path.basename(handler['filename'])
                handler['filename'] = os.path.join(handler_basepath, f"{log_identifier}_{handler_filename}")
        
        logging.config.dictConfig(config)
    else:
        logging.basicConfig(level=default_level)

def load_config(config_file='config/config.json', required_fields=[]):
    config_file = get_full_path(config_file)
    try:
        with open(config_file, 'r') as f:
            config = json.load(f)
        
        # Validering av konfigurationsdata
        for field in required_fields:
            if field not in config:
                raise ValueError(f"Obligatoriskt fält '{field}' saknas i konfigurationsfilen.")
        return config
    except (FileNotFoundError, ValueError) as e:
        logging.error(f"Fel vid laddning av konfigurationsfil: {e}")
        return {}

def save_to_file(data, filename):
    """Sparar data till en fil med förbättrad felhantering."""
    try:
        with open(filename, 'w') as f:
            json.dump(data, f, indent=4)
    except (FileNotFoundError, PermissionError) as e:
        logging.error(f"Kunde inte spara till fil {filename}: {e}")
    except Exception as e:
        logging.error(f"Oväntat fel vid sparande av fil {filename}: {e}")


def read_from_file(filename):
    """Läser data från en fil."""
    try:
        with open(filename, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        logging.error(f"Filen {filename} hittades inte.")
        return None

