#!/usr/bin/python3

import socket
import ipaddress
import argparse

def simple_port_scan(target_ip, port_range):
    open_ports = {}
    for port in range(port_range[0], port_range[1] + 1):
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(0.5)  # Timeout för att göra skanningen snabbare
            result = sock.connect_ex((str(target_ip), port))
            if result == 0:
                if target_ip in open_ports:
                    open_ports[target_ip].append(port)
                else:
                    open_ports[target_ip] = [port]
            sock.close()
        except socket.error:
            pass
    return open_ports

def scan_subnet(subnet, port_range):
    network = ipaddress.ip_network(subnet, strict=False)
    all_open_ports = {}
    for ip in network.hosts():
        print(f"Scanning IP: {ip}")
        open_ports = simple_port_scan(ip, port_range)
        if open_ports:
            all_open_ports[str(ip)] = open_ports[str(ip)]
    return all_open_ports

def main():
    parser = argparse.ArgumentParser(description='Simple Subnet Port Scanner')
    parser.add_argument('subnet', type=str, help='Target subnet in CIDR notation (e.g., 192.168.1.0/24)')
    parser.add_argument('start_port', type=int, help='Start port range')
    parser.add_argument('end_port', type=int, help='End port range')

    args = parser.parse_args()

    all_open_ports = scan_subnet(args.subnet, (args.start_port, args.end_port))

    if all_open_ports:
        for ip, ports in all_open_ports.items():
            print(f"Open ports on {ip}: {ports}")
    else:
        print("No open ports found.")

if __name__ == "__main__":
    main()

